services:
  store-db:
    image: postgres:14.1-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=store_db
    ports:
      - 5432:5432
    volumes:
      - ./database-init-scripts/postgres/init-scripts:/docker-entrypoint-initdb.d
    command: [ "postgres", "-c", "wal_level=logical" ]
  postgres-dw:
    image: postgres:14.1-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dw_db
    volumes:
      - ./database-init-scripts/postgres-dw/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - 5433:5433
    command: [ "postgres", "-c", "wal_level=logical", "-c", "port=5433"]
  shipping-db:
    image: mysql:8.0.36
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=debezium
      - MYSQL_PASSWORD=dbz
      - MYSQL_DATABASE=shipping_db
    ports:
      - 3306:3306
    volumes:
      - ./database-init-scripts/mysql/init-scripts:/docker-entrypoint-initdb.d
      - ./database-init-scripts/mysql/conf:/etc/mysql/conf.d
  zookeeper:
    image: zookeeper:3.9.0
  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  debezium-connect:
    image: debezium/connect:2.7.3.Final
    links:
      - kafka
      - store-db
      - shipping-db
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=debezium-events
      - CONFIG_STORAGE_TOPIC=debezium_configs
      - OFFSET_STORAGE_TOPIC=debezium_offsets
      - STATUS_STORAGE_TOPIC=debezium_statuses
    ports:
      - 8083:8083
  jobmanager:
    build:
      context: .
      dockerfile: ./flink-extractor/Dockerfile
    image: flink-extractor:latest 
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager 
      - DW_USERNAME=${DW_USERNAME}
      - DW_PASSWORD=${DW_PASSWORD}
      - DW_HOSTNAME=${DW_HOSTNAME}
      - DW_PORT=${DW_PORT}
      - DW_DATABASE=${DW_DATABASE}
      - BOOTSTRAP_SERVERS=${BOOTSTRAP_SERVERS}
  taskmanager-1:
    build:
      context: .
      dockerfile: ./flink-extractor/Dockerfile
    image: flink-extractor:latest 
    links: 
      - postgres-dw
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 15
      - DW_USERNAME=${DW_USERNAME}
      - DW_PASSWORD=${DW_PASSWORD}
      - DW_HOSTNAME=${DW_HOSTNAME}
      - DW_PORT=${DW_PORT}
      - DW_DATABASE=${DW_DATABASE}
      - BOOTSTRAP_SERVERS=${BOOTSTRAP_SERVERS}
      - FLINK_PROPERTIES_TASKMANAGER_MEMORY_PROCESS_SIZE=4g
  taskmanager-2:
    build:
      context: .
      dockerfile: ./flink-extractor/Dockerfile
    image: flink-extractor:latest 
    links: 
      - postgres-dw
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 15
      - DW_USERNAME=${DW_USERNAME}
      - DW_PASSWORD=${DW_PASSWORD}
      - DW_HOSTNAME=${DW_HOSTNAME}
      - DW_PORT=${DW_PORT}
      - DW_DATABASE=${DW_DATABASE}
      - BOOTSTRAP_SERVERS=${BOOTSTRAP_SERVERS}
      - FLINK_PROPERTIES_TASKMANAGER_MEMORY_PROCESS_SIZE=4g
## Dagster has been configured with a single container.
## Normal deployments would include a separate daemon container.
## This wasn't done as the footprint on Dagster is quite small. It is only used to track Flink jobs.
## See usual docker deployments here: https://docs.dagster.io/deployment/oss/deployment-options/docker
  # dagster-user-code:
  #   build:
  #       context: .
  #       dockerfile: dagster_code/Dockerfile
  #   networks:
  #     - dagster-network
  dagster:
    build:
        context: .
        dockerfile: dagster/Dockerfile
    container_name: dagster
    expose:
      - '3000'
    ports:
      - '3000:3000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
volumes:
  shared-tmpfs:
    driver: local
    driver_opts:
        type: "tmpfs"
        device: "tmpfs"